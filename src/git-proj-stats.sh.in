#!/bin/sh
#
#   Bindle Binaries Tools
#   Copyright (C) 2011,2012 Bindle Binaries <syzdek@bindlebinaries.com>.
#
#   @BINDLE_BINARIES_BSD_LICENSE_START@
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are
#   met:
#
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#      * Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#      * Neither the name of Bindle Binaries nor the
#        names of its contributors may be used to endorse or promote products
#        derived from this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#   IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
#   THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
#   PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BINDLE BINARIES BE LIABLE FOR
#   ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#   SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
#   OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.
#
#   @BINDLE_BINARIES_BSD_LICENSE_END@
#
#   git-proj-stats.sh - script for generating development stats on active projects
#

# configuration information
REPODIR=/pub/scm
SRCDIR=/pub/src
TEMPLATE=/tmp/mail-project-stats.$$
DATE=`date '+%a %Y-%m-%d'`
TIMELIMIT=7
HISTORYLIMIT=14
TIMEINTERVALS="1 2 3 4 5 6 7 14 30 60 90 120 365 730"


# sets script/package information
PACKAGE_NAME=`echo '@PACKAGE_NAME@' |sed -e 's/[@].*[@]//g'`
PACKAGE_VERSION=`echo '@PACKAGE_VERSION@' |sed -e 's/[@].*[@]//g'`
PACKAGE_BUGREPORT=`echo '@PACKAGE_BUGREPORT@' |sed -e 's/[@].*[@]//g'`


# parses CLI arguments
for FLAG in ${@};do
   if test "x${FLAG}" == "x--help";then
      echo "Usage: ${0} <address> <address> ... <address>"
      exit 0
   elif test "x${FLAG}" == "x--version";then
cat << EOF
git-proj-stats.sh (${PACKAGE_NAME}) ${PACKAGE_VERSION}
Written by David M. Syzdek.

Copyright 2011 Bindle Binaries <${PACKAGE_BUGREPORT}>.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF
      exit 0
   fi
done


# tests configuration
if test ! -d ${REPODIR};then
   echo "${0}: ${REPODIR}: repository prefix does not exist" 1>&2
   exit 1
fi
if test ! -d ${SRCDIR};then
   echo "${0}: ${SRCDIR}: source prefix does not exist" 1>&2
   exit 1
fi


echo "Generating list of repositories..."
for DOMAIN in `ls ${REPODIR}`;do
   if test -d ${REPODIR}/${DOMAIN};then
      for REPO in `ls -d ${REPODIR}/${DOMAIN}/*.git 2> /dev/null`;do
         if test -d ${REPO};then
            REPOLIST="${REPOLIST} ${REPO}"
         fi
      done
   fi
done


echo "creating directory structure..."
for REPO in ${REPOLIST};do
   SRC=`echo ${REPO} |sed -e "s,${REPODIR},${SRCDIR},g"`
   DOMAINDIR=`dirname ${SRC}`
   PROJNAME=`basename ${SRC} |sed -e 's/.git$//g'`
   PROJDIR="${DOMAINDIR}/${PROJNAME}"
   SRCLIST="${SRCLIST} ${PROJDIR}"
   if test ! -d ${PROJDIR};then
      echo "   Creating ${DOMAINDIR}/${PROJNAME}..."
      mkdir -p ${DOMAINDIR} || exit 1
      cd ${DOMAINDIR} || exit 1
      git clone ${REPO} || exit 1
      cd ${PROJDIR} || exit 1
      git branch master origin/master > /dev/null 2>&1
      git branch next   origin/next   > /dev/null 2>&1
      git branch pu     origin/pu     > /dev/null 2>&1
   fi
   cp ${REPO}/description ${PROJDIR}/.git/description
   cd ${PROJDIR} > /dev/null || exit 1
   git checkout pu > /dev/null 2>&1
   git pull > /dev/null || exit 1
done


echo "generating list of active projects..."
STATCOUNT=0
for PROJDIR in ${SRCLIST};do
   PROJNAME=`basename ${PROJDIR}`
   cd ${PROJDIR};
   HEAD=`git branch |egrep '^\* '|awk '{print$2}'`
   DATA=`git rev-list -n1 --after="${TIMELIMIT} day ago" ${HEAD} 2> /dev/null`
   if test "x${DATA}" != "x";then
      STATLIST="${STATLIST} ${PROJDIR}"
      STATCOUNT=$((${STATCOUNT}+1))
   fi
done


# exits if there is no recent activity
if test "x${STATLIST}" == "x";then
   exit 0;
fi


# Creates e-mail headers
cat << EOF > ${TEMPLATE}
To: @EMAIL_ADDRESS@
From: "David M. Syzdek" <syzdek@bindlebinaries.com>
Subject: Bindle Binaries Project Activity (${DATE} / ${STATCOUNT} projects)
Content-Type: text/html; charset=ISO-8859-1

EOF


# create list of anchors
PROJANCHORS="Project_Statistics Project_Line_Counts Project_ChangeLog"
ANCHORS="Active_Projects ${PROJANCHORS} Help"


# E-mail Section: Active Projects
ANCHOR=Active_Projects
TITLE=`echo ${ANCHOR} |sed -e 's/_/ /g'`
echo "generating project summary..."
echo "<a name='${ANCHOR}'></a>"                                                       >> ${TEMPLATE} 
echo "<div style='color:#660066'><h3>${TITLE} (Last ${TIMELIMIT} days)</h3></div>"   >> ${TEMPLATE}
for PROJDIR in ${STATLIST};do
   PROJNAME=`basename ${PROJDIR}`
   PROJANCHOR="${ANCHOR}_${PROJNAME}"
   PROJCLIENT=`dirname ${PROJDIR}`
   PROJCLIENT=`basename ${PROJCLIENT}`
   PROJURL="http://scm.office.bindlebinaries.com/pub/scm/${PROJCLIENT}/${PROJNAME}.git"
   HEAD=`git --git-dir=${PROJDIR}/.git branch |egrep '^\* '|awk '{print$2}'`
   GITDIR="--git-dir=${PROJDIR}/.git"
   if test -d ${PROJDIR};then
      echo "   generating project summary for ${PROJDIR}..."
      cd ${PROJDIR}
      echo "<a name='${ANCHOR}_${PROJNAME}'></a>"                       >> ${TEMPLATE}
      echo -n "<p>"                                                     >> ${TEMPLATE}
      echo "<b>${PROJNAME}</b><br/>"      >> ${TEMPLATE}
      if test -f ${PROJDIR}/.git/description;then
         echo -n "<i><b>"                                               >> ${TEMPLATE}
         cat ${PROJDIR}/.git/description                                >> ${TEMPLATE}
         echo "</b></i>"                                                >> ${TEMPLATE}
      fi
      echo "<br/>Client: <i>${PROJCLIENT}</i>"                          >> ${TEMPLATE}
      FIRSTACTIVITY=`git log --quiet --date=short --pretty="format:%ad" --reverse ${HEAD} |head -1`
      LASTACTIVITY=`git ${GITDIR} log -n1 --quiet --date=short --pretty="format:%ad" ${HEAD}^..${HEAD}`
      echo "<br/>Active: <i>${FIRSTACTIVITY} to ${LASTACTIVITY}</i>"  >> ${TEMPLATE}
      echo "<br/>Project Links:<i>"                                     >> ${TEMPLATE}
      for LINK in ${PROJANCHORS};do
         TITLE=`echo ${LINK} |sed -e 's/_/ /g' -e 's/Project //g'`
         echo "<a href='#${LINK}_${PROJNAME}' style='color:#660066;text-decoration:none;'>${TITLE}</a>,"   >> ${TEMPLATE}
      done
      echo "<a href='${PROJURL}' style='color:#660066;text-decoration:none;'>Source Code</a>"   >> ${TEMPLATE}
     echo "</p>"                                                 >> ${TEMPLATE}
   fi
done
echo -e "\n\n" >> ${TEMPLATE}


# E-mail Section: Project Diff Statistics
ANCHOR=Project_Statistics
TITLE=`echo ${ANCHOR} |sed -e 's/_/ /g'`
echo "running git diff..."
echo "<a name='${ANCHOR}'></a>"                              >> ${TEMPLATE}
echo "<div style='color:#660066'><h3>${TITLE}</h3></div>"   >> ${TEMPLATE}
for REPO in ${STATLIST};do
   PROJNAME=`basename ${REPO}`
   if test -d ${REPO};then
      echo "   running git diff on ${REPO}..."
      cd ${REPO}
      echo "<a name='${ANCHOR}_${PROJNAME}'></a>"               >> ${TEMPLATE}
      HEAD=`git branch |egrep '^\* '|awk '{print$2}'`
      echo -n "<p>"                                             >> ${TEMPLATE}
      echo "<b>${PROJNAME}</b>"                                 >> ${TEMPLATE}

      for BRANCH in pu next master;do
         PROJVER=`git describe origin/${BRANCH} 2> /dev/null |sed -e 's/-/./g' -e 's/^v//g'` 2> /dev/null
         if test "x${PROJVER}" != "x";then
            echo "<br/>Version: <i>${PROJVER} (${BRANCH})</i>"           >> ${TEMPLATE}
         fi
      done

      for NUM in ${TIMEINTERVALS};do
         STAT=`git diff --stat $(git rev-list -n1 --before="${NUM} day ago" ${HEAD}) |grep 'files changed, '`
         if test "x${STAT}" != "x${OLDSTAT}";then
            if test "x${STAT}" != "x";then
               echo "<br/>Changes to ${HEAD} branch within last  ${NUM} day(s): ${STAT}" >> ${TEMPLATE}
            fi
            OLDSTAT="${STAT}"
         fi
      done

      echo "</p>"                                                >> ${TEMPLATE}
   fi
done
echo -e "\n\n" >> ${TEMPLATE}


# E-mail Section: Project Line Counts
ANCHOR=Project_Line_Counts
TITLE=`echo ${ANCHOR} |sed -e 's/_/ /g'`
echo "running ohcount..."
echo "<a name='${ANCHOR}'></a>"                             >> ${TEMPLATE}
echo "<div style='color:#660066'><h3>${TITLE}</h3></div>"  >> ${TEMPLATE}
for REPO in ${STATLIST};do
   PROJNAME=`basename ${REPO}`
   if test -d ${REPO};then
      echo "   running ohcount on ${REPO}..."
      cd ${REPO}
      echo "<a name='${ANCHOR}_${PROJNAME}'></a>"                >> ${TEMPLATE}
      echo -n "<p>"                                              >> ${TEMPLATE}
      echo "<b>${PROJNAME}</b><br/>"                             >> ${TEMPLATE}
      echo -n "<pre>"                                            >> ${TEMPLATE}
      /usr/local/bin/ohcount ${REPO} |egrep -v '^$|Examining|Ohloh'    >> ${TEMPLATE}
      echo -n "</pre>"                                           >> ${TEMPLATE}
      echo "</p>"                                                >> ${TEMPLATE}
   fi
done
echo -e "\n\n" >> ${TEMPLATE}


# E-mail Section: Project Commit Logs
ANCHOR=Project_ChangeLog
TITLE=`echo ${ANCHOR} |sed -e 's/_/ /g'`
echo "generating project log..."
echo "<a name='${ANCHOR}'></a>"                               >> ${TEMPLATE}
echo "<div style='color:#660066'><h3>${TITLE}</h3></div>"    >> ${TEMPLATE}
for REPO in ${STATLIST};do
   PROJNAME=`basename ${REPO}`
   if test -d ${REPO};then
      echo "   generating logs for ${REPO}..."
      cd ${REPO}
      echo "<a name='${ANCHOR}_${PROJNAME}'></a>"                >> ${TEMPLATE}
      echo -n "<p>"                                              >> ${TEMPLATE}
      echo "<b>${PROJNAME}</b><br/>"                             >> ${TEMPLATE}
      echo -n "<pre>"                                            >> ${TEMPLATE}
      HEAD=`git branch |egrep '^\* '|awk '{print$2}'`
      LINKDIR=`echo ${REPO} |sed -e 's/$/.git/g' -e 's/\/pub\/src\//\/pub\/scm\//g' -e 's/\//\\\\\//g'`
      git log --quiet --date=short --pretty="format:%ad %h %s" --after="${HISTORYLIMIT} day ago" ${HEAD} \
         |sed -e "s/^\([[:digit:]]\{4\}\(-[[:digit:]]\{2\}\)\{2\}\) \([[:xdigit:]]\{1,\}\) /\1 <a href='http:\/\/scm.office.bindlebinaries.com${LINKDIR}\?a=commit;h=\3' style='color:#660066;text-decoration:none;'>\3<\/a> /g"  >> ${TEMPLATE}
      echo -n "</pre>"                                           >> ${TEMPLATE}
      echo "</p>"                                                >> ${TEMPLATE}
   fi
done
echo -e "\n\n" >> ${TEMPLATE}


# E-mail Section: Help
ANCHOR=Help
TITLE=`echo ${ANCHOR} |sed -e 's/_/ /g'`
cat << EOF >> ${TEMPLATE}
<a name='${ANCHOR}'></a>
<div style='color:#660066'><h3>${TITLE}</h3></div>
<b>Version Naming Conventions:</b>
<p>
A project version is used to identify a specific instance of the project. The version will be in one of the following formats:
<pre>
  <b>Managed Projects:</b>
  <i>x.y</i>
  <i>x.y.z</i>
  <i>x.y.z.c</i>

  <b>Unmanaged Projects:</b>
  <i>yyyy.mm.dd</i>
  <i>yyyy.mm.dd.c</i>

  <b>Where:</b>
  <i>x</i>    is the major release version.
  <i>y</i>    is the minor release version.
  <i>z</i>    is the patch level.
  <i>c</i>    is the commit identifier of the last change.
  <i>yyyy</i> is the year of the release.
  <i>mm</i>   is the month of the release.
  <i>dd</i>   is the day of the release.
</pre>
</p>
<b>Branch Naming Conventions:</b>
<p>
A project's repository contains multiple branches which are used to organize the
development process.  Bindle Binaries uses the following convention for branch
naming:
<pre>
  <i>master</i> - Current release of packages.
  <i>next</i>   - changes staged for next release
  <i>pu</i>     - proposed updates for next release
  <i>xx/yy+</i> - branch for testing new changes before merging to 'pu' branch
</pre>
Active development occurrs either directly on the 'pu' branch or on topic branches.
Once modifications are considered stable, they are merged from the 'pu' branch
into the 'next' branch. The modifications are not merged into the 'master' branch
until a new public release (aka version) of the project is published. As such,
information in this message is generated from the 'pu' branch of a project rather
than the 'next' or 'master' branches which are much less frequently updated.
<p>
<b><i>The information in this message was generated using Ohcount and Git.</i></b>
EOF
echo -e "\n\n" >> ${TEMPLATE}


# sends e-mail messages
SENTRESULTS=NO
for ADDR in $@;do
   echo "sending results to ${ADDR}..."
   sed -e "s/[@]EMAIL_ADDRESS[@]/${ADDR}/g" ${TEMPLATE} |sendmail -t ${ADDR}
   SENTRESULTS=YES
done

if test "x${SENTRESULTS}" == "xNO";then
   cat ${TEMPLATE}
fi


# removes e-mail template
rm -f /tmp/mail-project-stats.*

# end of script
